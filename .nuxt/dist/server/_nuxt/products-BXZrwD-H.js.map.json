{"file":"products-BXZrwD-H.js","mappings":"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","names":[],"sources":["../../../../stores/products.ts"],"sourcesContent":["import { defineStore } from 'pinia'\n\ninterface Product {\n  id: number\n  name: string\n  description: string\n  price: number\n  category: string\n  image: string\n  isAvailable: boolean\n}\n\ninterface ProductState {\n  products: Product[]\n  categories: string[]\n  isLoading: boolean\n}\n\nexport const useProductsStore = defineStore('products', {\n  state: (): ProductState => ({\n    products: [\n      {\n        id: 1,\n        name: 'Margherita Pizza',\n        description: 'Classic pizza with tomato sauce, mozzarella, and fresh basil',\n        price: 18.99,\n        category: 'Pizza',\n        image: 'https://images.pexels.com/photos/315755/pexels-photo-315755.jpeg?auto=compress&cs=tinysrgb&w=400',\n        isAvailable: true\n      },\n      {\n        id: 2,\n        name: 'Chicken Caesar Salad',\n        description: 'Fresh romaine lettuce with grilled chicken, parmesan, and caesar dressing',\n        price: 14.99,\n        category: 'Salads',\n        image: 'https://images.pexels.com/photos/1213710/pexels-photo-1213710.jpeg?auto=compress&cs=tinysrgb&w=400',\n        isAvailable: true\n      },\n      {\n        id: 3,\n        name: 'Spaghetti Carbonara',\n        description: 'Traditional Italian pasta with eggs, cheese, pancetta, and black pepper',\n        price: 16.99,\n        category: 'Pasta',\n        image: 'https://images.pexels.com/photos/4518843/pexels-photo-4518843.jpeg?auto=compress&cs=tinysrgb&w=400',\n        isAvailable: true\n      },\n      {\n        id: 4,\n        name: 'Chocolate Tiramisu',\n        description: 'Rich Italian dessert with coffee-soaked ladyfingers and mascarpone',\n        price: 8.99,\n        category: 'Desserts',\n        image: 'https://images.pexels.com/photos/6880219/pexels-photo-6880219.jpeg?auto=compress&cs=tinysrgb&w=400',\n        isAvailable: true\n      },\n      {\n        id: 5,\n        name: 'Bruschetta',\n        description: 'Toasted bread topped with fresh tomatoes, garlic, and basil',\n        price: 9.99,\n        category: 'Appetizers',\n        image: 'https://images.pexels.com/photos/8844885/pexels-photo-8844885.jpeg?auto=compress&cs=tinysrgb&w=400',\n        isAvailable: false\n      },\n      {\n        id: 6,\n        name: 'Grilled Salmon',\n        description: 'Fresh Atlantic salmon with herbs and lemon butter sauce',\n        price: 24.99,\n        category: 'Main Courses',\n        image: 'https://images.pexels.com/photos/3926124/pexels-photo-3926124.jpeg?auto=compress&cs=tinysrgb&w=400',\n        isAvailable: true\n      }\n    ],\n    categories: ['Appetizers', 'Main Courses', 'Desserts', 'Beverages', 'Salads', 'Pasta', 'Pizza'],\n    isLoading: false\n  }),\n\n  getters: {\n    allProducts: (state) => state.products,\n    availableProducts: (state) => state.products.filter(p => p.isAvailable),\n    productsByCategory: (state) => (category: string) => \n      state.products.filter(p => p.category === category),\n    getProductById: (state) => (id: number) => state.products.find(p => p.id === id),\n    productCategories: (state) => state.categories,\n    totalProducts: (state) => state.products.length,\n    availableProductsCount: (state) => state.products.filter(p => p.isAvailable).length\n  },\n\n  actions: {\n    async addProduct(productData: Omit<Product, 'id'>) {\n      this.isLoading = true\n      try {\n        const newProduct: Product = {\n          id: Math.max(...this.products.map(p => p.id)) + 1,\n          ...productData\n        }\n        this.products.push(newProduct)\n        return { success: true, product: newProduct }\n      } catch (error: any) {\n        return { success: false, error: error.message }\n      } finally {\n        this.isLoading = false\n      }\n    },\n\n    async updateProduct(productId: number, updates: Partial<Product>) {\n      this.isLoading = true\n      try {\n        const productIndex = this.products.findIndex(p => p.id === productId)\n        if (productIndex !== -1) {\n          this.products[productIndex] = { ...this.products[productIndex], ...updates }\n          return { success: true, product: this.products[productIndex] }\n        }\n        return { success: false, error: 'Product not found' }\n      } catch (error: any) {\n        return { success: false, error: error.message }\n      } finally {\n        this.isLoading = false\n      }\n    },\n\n    async deleteProduct(productId: number) {\n      this.isLoading = true\n      try {\n        const productIndex = this.products.findIndex(p => p.id === productId)\n        if (productIndex !== -1) {\n          this.products.splice(productIndex, 1)\n          return { success: true }\n        }\n        return { success: false, error: 'Product not found' }\n      } catch (error: any) {\n        return { success: false, error: error.message }\n      } finally {\n        this.isLoading = false\n      }\n    },\n\n    async toggleProductAvailability(productId: number) {\n      const product = this.products.find(p => p.id === productId)\n      if (product) {\n        product.isAvailable = !product.isAvailable\n        return { success: true, product }\n      }\n      return { success: false, error: 'Product not found' }\n    }\n  }\n})"],"version":3}