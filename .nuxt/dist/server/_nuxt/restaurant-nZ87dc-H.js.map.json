{"file":"restaurant-nZ87dc-H.js","mappings":";;;;;;;;;;;;;;;;;;AA0Ba,MAAA,qBAAqB,YAAY,cAAc;AAAA,EAC1D,OAAO,OAAwB;AAAA,IAC7B,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,SAAS;AAAA,MACT,OAAO;AAAA,MACP,OAAO;AAAA,MACP,aAAa;AAAA,MACb,aAAa;AAAA,MACb,aAAa;AAAA,IACf;AAAA,IACA,OAAO;AAAA,MACL,aAAa;AAAA,MACb,eAAe;AAAA,MACf,cAAc;AAAA,MACd,eAAe;AAAA,IACjB;AAAA,IACA,WAAW;AAAA,EAAA;AAAA,EAGb,SAAS;AAAA,IACP,gBAAgB,CAAC,UAAU,MAAM;AAAA,IACjC,iBAAiB,CAAC,UAAU,MAAM;AAAA,IAClC,kBAAkB,CAAC,UAAU;AACrB,YAAA,0BAAU,KAAK;AACrB,YAAM,cAAc,IAAI,SAAa,IAAA,MAAM,IAAI,WAAW;AACpD,YAAA,WAAW,SAAS,MAAM,KAAK,YAAY,QAAQ,KAAK,EAAE,CAAC;AAC3D,YAAA,YAAY,SAAS,MAAM,KAAK,YAAY,QAAQ,KAAK,EAAE,CAAC;AAC3D,aAAA,eAAe,YAAY,eAAe;AAAA,IAAA;AAAA,EAErD;AAAA,EAEA,SAAS;AAAA,IACP,MAAM,qBAAqB,SAAkC;AAC3D,WAAK,YAAY;AACb,UAAA;AAEF,cAAM,IAAI,QAAQ,CAAA,YAAW,WAAW,SAAS,GAAI,CAAC;AACtD,aAAK,OAAO,EAAE,GAAG,KAAK,MAAM,GAAG,QAAQ;AAChC,eAAA,EAAE,SAAS,KAAK;AAAA,eAChB,OAAY;AACnB,eAAO,EAAE,SAAS,OAAO,OAAO,MAAM,QAAQ;AAAA,MAAA,UAC9C;AACA,aAAK,YAAY;AAAA,MAAA;AAAA,IAErB;AAAA,IAEA,MAAM,uBAAuB;AAC3B,WAAK,YAAY;AACb,UAAA;AAEF,cAAM,IAAI,QAAQ,CAAA,YAAW,WAAW,SAAS,GAAG,CAAC;AAE9C,eAAA,EAAE,SAAS,KAAK;AAAA,eAChB,OAAY;AACnB,eAAO,EAAE,SAAS,OAAO,OAAO,MAAM,QAAQ;AAAA,MAAA,UAC9C;AACA,aAAK,YAAY;AAAA,MAAA;AAAA,IACnB;AAAA,EACF;AAEJ,CAAC;;;;;ACTD,UAAM,kBAAkB,mBAAkB;AAE1C,UAAM,iBAAiB,IAAI;AAAA,MACzB,MAAM;AAAA,MACN,SAAS;AAAA,MACT,OAAO;AAAA,MACP,OAAO;AAAA,IACT,CAAC;;wkBArE+BA,cAAA,SAAAC,MAAA,cAAA,EAAe,IAAI,iQAMlBC,eAAAD,MAAA,cAAA,EAAe,OAAO,+JAMvBD,cAAA,SAAAC,MAAA,cAAA,EAAe,KAAK,iLAIpBD,cAAA,SAAAC,MAAA,cAAA,EAAe,KAAK,4IAKLE,sBAAAF,MAAA,eAAA,EAAgB,SAAS,IAAA,cAAA;AAC7C,YAAAG,mBAAAH,MAAA,SAAA,GAAA,EAAA,OAAM,eAAc,GAAA,MAAA,OAAA,CAAA;AACnB,UAAAA,MAAA,eAAA,EAAgB,WAAS;;;;;+VAeMA,MAAe,eAAA,EAAC,gBAAgB,WAAW,6KAI3CA,MAAe,eAAA,EAAC,gBAAgB,aAAa,4KAI7CA,MAAe,eAAA,EAAC,gBAAgB,YAAY,oKAI5CC,eAAAD,MAAA,eAAA,EAAgB,gBAAgB,cAAc,eAAc,CAAA;;;;;;;;;;","names":["_ssrRenderAttr","_unref","_ssrInterpolate","_ssrIncludeBooleanAttr","_ssrRenderComponent"],"sources":["../../../../stores/restaurant.ts","../../../../pages/restaurant.vue"],"sourcesContent":["import { defineStore } from 'pinia'\n\ninterface RestaurantInfo {\n  name: string\n  cuisineType: string\n  address: string\n  phone: string\n  email: string\n  openingTime: string\n  closingTime: string\n  description: string\n}\n\ninterface RestaurantStats {\n  totalTables: number\n  totalProducts: number\n  totalWaiters: number\n  monthlyOrders: number\n}\n\ninterface RestaurantState {\n  info: RestaurantInfo\n  stats: RestaurantStats\n  isLoading: boolean\n}\n\nexport const useRestaurantStore = defineStore('restaurant', {\n  state: (): RestaurantState => ({\n    info: {\n      name: 'La Bella Vista',\n      cuisineType: 'italian',\n      address: '123 Main Street, Downtown\\nCity, State 12345',\n      phone: '+1 (555) 123-4567',\n      email: 'info@labellavista.com',\n      openingTime: '09:00',\n      closingTime: '22:00',\n      description: 'Authentic Italian cuisine in the heart of downtown. Fresh ingredients, traditional recipes, and warm hospitality.'\n    },\n    stats: {\n      totalTables: 24,\n      totalProducts: 156,\n      totalWaiters: 8,\n      monthlyOrders: 1245\n    },\n    isLoading: false\n  }),\n\n  getters: {\n    restaurantInfo: (state) => state.info,\n    restaurantStats: (state) => state.stats,\n    isRestaurantOpen: (state) => {\n      const now = new Date()\n      const currentTime = now.getHours() * 100 + now.getMinutes()\n      const openTime = parseInt(state.info.openingTime.replace(':', ''))\n      const closeTime = parseInt(state.info.closingTime.replace(':', ''))\n      return currentTime >= openTime && currentTime <= closeTime\n    }\n  },\n\n  actions: {\n    async updateRestaurantInfo(updates: Partial<RestaurantInfo>) {\n      this.isLoading = true\n      try {\n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 1000))\n        this.info = { ...this.info, ...updates }\n        return { success: true }\n      } catch (error: any) {\n        return { success: false, error: error.message }\n      } finally {\n        this.isLoading = false\n      }\n    },\n\n    async fetchRestaurantStats() {\n      this.isLoading = true\n      try {\n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 500))\n        // In real app, this would fetch from API\n        return { success: true }\n      } catch (error: any) {\n        return { success: false, error: error.message }\n      } finally {\n        this.isLoading = false\n      }\n    }\n  }\n})","<template>\n  <div>\n    <!-- Header -->\n    <div class=\"mb-8\">\n      <h1 class=\"text-3xl font-bold text-gray-900 mb-2\">Informações do Restaurante</h1>\n      <p class=\"text-gray-600\">Gerencie as informações básicas e configurações do seu restaurante</p>\n    </div>\n\n    <div class=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n      <!-- Restaurant Info Form -->\n      <div class=\"lg:col-span-2\">\n        <div class=\"card\">\n          <h2 class=\"text-xl font-semibold text-gray-900 mb-6\">Informações Básicas</h2>\n          <form @submit.prevent=\"saveRestaurantInfo\" class=\"form-section\">\n            <div class=\"form-row\">\n              <div class=\"form-group\">\n                <label class=\"block text-sm font-medium text-gray-700 mb-2\">Nome do Restaurante</label>\n                <input v-model=\"restaurantForm.name\" type=\"text\" class=\"input-field\" placeholder=\"Enter restaurant name\">\n              </div>\n            </div>\n\n            <div class=\"form-group\">\n              <label class=\"block text-sm font-medium text-gray-700 mb-2\">Endereço</label>\n              <textarea v-model=\"restaurantForm.address\" rows=\"3\" class=\"input-field\" placeholder=\"Enter full address\"></textarea>\n            </div>\n\n            <div class=\"form-row\">\n              <div class=\"form-group\">\n                <label class=\"block text-sm font-medium text-gray-700 mb-2\">Número de Telefone</label>\n                <input v-model=\"restaurantForm.phone\" type=\"tel\" class=\"input-field\" placeholder=\"+1 (555) 123-4567\">\n              </div>\n              <div class=\"form-group\">\n                <label class=\"block text-sm font-medium text-gray-700 mb-2\">Email</label>\n                <input v-model=\"restaurantForm.email\" type=\"email\" class=\"input-field\" placeholder=\"info@restaurant.com\">\n              </div>\n            </div>\n\n            <div class=\"flex justify-end pt-4\">\n              <button type=\"submit\" :disabled=\"restaurantStore.isLoading\" class=\"btn-primary\">\n                <CheckIcon class=\"w-4 h-4 mr-2\" />\n                <span v-if=\"restaurantStore.isLoading\">Saving...</span>\n                <span v-else>Save Changes</span>\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n\n      <!-- Restaurant Stats -->\n      <div class=\"space-y-6\">\n        <div class=\"card\">\n          <h3 class=\"text-lg font-semibold text-gray-900 mb-6\">Estatísticas do Restaurante</h3>\n          <div class=\"space-y-4\">\n            <div class=\"flex justify-between items-center\">\n              <span class=\"text-gray-600\">Total de Mesas</span>\n              <span class=\"font-semibold text-gray-900\">{{ restaurantStore.restaurantStats.totalTables }}</span>\n            </div>\n            <div class=\"flex justify-between items-center\">\n              <span class=\"text-gray-600\">Total de Produtos</span>\n              <span class=\"font-semibold text-gray-900\">{{ restaurantStore.restaurantStats.totalProducts }}</span>\n            </div>\n            <div class=\"flex justify-between items-center\">\n              <span class=\"text-gray-600\">Total de Garçons</span>\n              <span class=\"font-semibold text-gray-900\">{{ restaurantStore.restaurantStats.totalWaiters }}</span>\n            </div>\n            <div class=\"flex justify-between items-center\">\n              <span class=\"text-gray-600\">Total de Pedidos no Mês</span>\n              <span class=\"font-semibold text-gray-900\">{{ restaurantStore.restaurantStats.monthlyOrders.toLocaleString() }}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { CheckIcon } from '@heroicons/vue/24/outline'\n\nconst restaurantStore = useRestaurantStore()\n\nconst restaurantForm = ref({\n  name: '',\n  address: '',\n  phone: '',\n  email: ''\n})\n\nconst saveRestaurantInfo = async () => {\n  const result = await restaurantStore.updateRestaurantInfo(restaurantForm.value)\n  \n  if (result.success) {\n    alert('Restaurant information saved successfully!')\n  } else {\n    alert('Failed to save restaurant information: ' + result.error)\n  }\n}\n\n// Initialize form with current restaurant info\nonMounted(() => {\n  const info = restaurantStore.restaurantInfo\n  restaurantForm.value = {\n    name: info.name,\n    address: info.address,\n    phone: info.phone,\n    email: info.email\n  }\n})\n</script>"],"version":3}