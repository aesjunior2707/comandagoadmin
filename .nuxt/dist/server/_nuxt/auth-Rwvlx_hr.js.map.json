{"file":"auth-Rwvlx_hr.js","mappings":";AAmBa,MAAA,eAAe,YAAY,QAAQ;AAAA,EAC9C,OAAO,OAAkB;AAAA,IACvB,MAAM;AAAA,IACN,WAAW;AAAA,EAAA;AAAA,EAGb,SAAS;AAAA,IACP,iBAAiB,CAAC,UAAU,CAAC,CAAC,MAAM;AAAA,IACpC,aAAa,CAAC,UAAU,MAAM;AAAA,IAC9B,gBAAgB,CAAC,UAAU;;AAAA,gCAAM,SAAN,mBAAY,eAAZ,mBAAwB,SAAQ;AAAA;AAAA,IAC3D,UAAU,CAAC,UAAU;;AAAA,0BAAM,SAAN,mBAAY,SAAQ;AAAA;AAAA,EAC3C;AAAA,EAEA,SAAS;AAAA,IACP,MAAM,MAAM,aAAkD;AAC5D,WAAK,YAAY;AAEb,UAAA;AAEF,cAAM,IAAI,QAAQ,CAAA,YAAW,WAAW,SAAS,IAAI,CAAC;AAGtD,aAAK,OAAO;AAAA,UACV,IAAI;AAAA,UACJ,MAAM;AAAA,UACN,OAAO,YAAY;AAAA,UACnB,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,YAAY;AAAA,YACV,MAAM;AAAA,YACN,IAAI;AAAA,UAAA;AAAA,QAER;AAEA,cAAM,WAAW,GAAG;AACb,eAAA,EAAE,SAAS,KAAK;AAAA,eAChB,OAAY;AACZ,eAAA;AAAA,UACL,SAAS;AAAA,UACT,OAAO,MAAM,WAAW;AAAA,QAC1B;AAAA,MAAA,UACA;AACA,aAAK,YAAY;AAAA,MAAA;AAAA,IAErB;AAAA,IAEA,MAAM,SAAS;AACb,WAAK,OAAO;AACZ,YAAM,WAAW,QAAQ;AAAA,IAC3B;AAAA,IAEA,cAAc,SAAwB;AACpC,UAAI,KAAK,MAAM;AACb,aAAK,OAAO,EAAE,GAAG,KAAK,MAAM,GAAG,QAAQ;AAAA,MAAA;AAAA,IAE3C;AAAA;AAAA,IAGA,iBAAiB;AAAA,IAAA;AAAA,EAInB;AAAA,EAEA,SAAS;AAAA,IACP,SAAS,eAAe;AAAA,IACxB,OAAO,CAAC,MAAM;AAAA,EAAA;AAElB,CAAC;","names":[],"sources":["../../../../stores/auth.ts"],"sourcesContent":["import { defineStore } from 'pinia'\n\ninterface User {\n  id: number\n  name: string\n  email: string\n  role: string\n  avatar: string\n  restaurant: {\n    name: string\n    id: string\n  }\n}\n\ninterface AuthState {\n  user: User | null\n  isLoading: boolean\n}\n\nexport const useAuthStore = defineStore('auth', {\n  state: (): AuthState => ({\n    user: null,\n    isLoading: false\n  }),\n\n  getters: {\n    isAuthenticated: (state) => !!state.user,\n    currentUser: (state) => state.user,\n    restaurantName: (state) => state.user?.restaurant?.name || '',\n    userRole: (state) => state.user?.role || ''\n  },\n\n  actions: {\n    async login(credentials: { email: string; password: string }) {\n      this.isLoading = true\n      \n      try {\n        // Simulate API call\n        await new Promise(resolve => setTimeout(resolve, 1500))\n        \n        // Mock authentication - in real app, this would be an API call\n        this.user = {\n          id: 1,\n          name: 'Restaurant Admin',\n          email: credentials.email,\n          role: 'admin',\n          avatar: 'https://images.pexels.com/photos/1043471/pexels-photo-1043471.jpeg?auto=compress&cs=tinysrgb&w=400',\n          restaurant: {\n            name: 'La Bella Vista',\n            id: 'rest_001'\n          }\n        }\n        \n        await navigateTo('/')\n        return { success: true }\n      } catch (error: any) {\n        return { \n          success: false, \n          error: error.message || 'Login failed' \n        }\n      } finally {\n        this.isLoading = false\n      }\n    },\n\n    async logout() {\n      this.user = null\n      await navigateTo('/login')\n    },\n\n    updateProfile(updates: Partial<User>) {\n      if (this.user) {\n        this.user = { ...this.user, ...updates }\n      }\n    },\n\n    // Initialize user from stored session (for SSR/hydration)\n    initializeAuth() {\n      // In a real app, you might check localStorage or cookies here\n      // For now, we'll keep it simple\n    }\n  },\n\n  persist: {\n    storage: persistedState.localStorage,\n    paths: ['user']\n  }\n})"],"version":3}