{"file":"tables-CesVfhvL.js","mappings":"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","names":[],"sources":["../../../../stores/tables.ts"],"sourcesContent":["import { defineStore } from 'pinia'\n\ninterface Table {\n  id: number\n  number: number\n  capacity: number\n  location: string\n  status: 'available' | 'occupied' | 'reserved' | 'out-of-service'\n  waiter: string | null\n  currentOrder: number | null\n}\n\ninterface TableState {\n  tables: Table[]\n  isLoading: boolean\n}\n\nexport const useTablesStore = defineStore('tables', {\n  state: (): TableState => ({\n    tables: [\n      { id: 1, number: 1, capacity: 4, location: 'Main Floor', status: 'available', waiter: null, currentOrder: null },\n      { id: 2, number: 2, capacity: 2, location: 'Main Floor', status: 'occupied', waiter: 'John Doe', currentOrder: 85.50 },\n      { id: 3, number: 3, capacity: 6, location: 'Terrace', status: 'available', waiter: null, currentOrder: null },\n      { id: 4, number: 4, capacity: 4, location: 'Main Floor', status: 'reserved', waiter: 'Jane Smith', currentOrder: null },\n      { id: 5, number: 5, capacity: 8, location: 'Private Room', status: 'occupied', waiter: 'Mike Johnson', currentOrder: 124.75 },\n      { id: 6, number: 6, capacity: 2, location: 'Bar Area', status: 'available', waiter: null, currentOrder: null },\n      { id: 7, number: 7, capacity: 4, location: 'Main Floor', status: 'out-of-service', waiter: null, currentOrder: null },\n      { id: 8, number: 8, capacity: 6, location: 'Terrace', status: 'available', waiter: null, currentOrder: null }\n    ],\n    isLoading: false\n  }),\n\n  getters: {\n    allTables: (state) => state.tables,\n    availableTables: (state) => state.tables.filter(t => t.status === 'available'),\n    occupiedTables: (state) => state.tables.filter(t => t.status === 'occupied'),\n    reservedTables: (state) => state.tables.filter(t => t.status === 'reserved'),\n    outOfServiceTables: (state) => state.tables.filter(t => t.status === 'out-of-service'),\n    totalTables: (state) => state.tables.length,\n    tableStatusCounts: (state) => ({\n      available: state.tables.filter(t => t.status === 'available').length,\n      occupied: state.tables.filter(t => t.status === 'occupied').length,\n      reserved: state.tables.filter(t => t.status === 'reserved').length,\n      outOfService: state.tables.filter(t => t.status === 'out-of-service').length\n    }),\n    getTableById: (state) => (id: number) => state.tables.find(t => t.id === id)\n  },\n\n  actions: {\n    async addTable(tableData: Omit<Table, 'id' | 'status' | 'waiter' | 'currentOrder'>) {\n      this.isLoading = true\n      try {\n        const newTable: Table = {\n          id: Math.max(...this.tables.map(t => t.id)) + 1,\n          ...tableData,\n          status: 'available',\n          waiter: null,\n          currentOrder: null\n        }\n        this.tables.push(newTable)\n        return { success: true, table: newTable }\n      } catch (error: any) {\n        return { success: false, error: error.message }\n      } finally {\n        this.isLoading = false\n      }\n    },\n\n    async updateTableStatus(tableId: number, status: Table['status']) {\n      const table = this.tables.find(t => t.id === tableId)\n      if (table) {\n        table.status = status\n        if (status === 'available') {\n          table.waiter = null\n          table.currentOrder = null\n        }\n        return { success: true }\n      }\n      return { success: false, error: 'Table not found' }\n    },\n\n    async assignWaiterToTable(tableId: number, waiterName: string) {\n      const table = this.tables.find(t => t.id === tableId)\n      if (table) {\n        table.waiter = waiterName\n        return { success: true }\n      }\n      return { success: false, error: 'Table not found' }\n    },\n\n    async updateTableOrder(tableId: number, orderTotal: number) {\n      const table = this.tables.find(t => t.id === tableId)\n      if (table) {\n        table.currentOrder = orderTotal\n        return { success: true }\n      }\n      return { success: false, error: 'Table not found' }\n    }\n  }\n})"],"version":3}