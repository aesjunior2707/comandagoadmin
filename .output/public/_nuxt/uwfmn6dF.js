import{g as s}from"./BkdkwG03.js";const i=s("tables",{state:()=>({tables:[{id:1,number:1,capacity:4,location:"Main Floor",status:"available",waiter:null,currentOrder:null},{id:2,number:2,capacity:2,location:"Main Floor",status:"occupied",waiter:"John Doe",currentOrder:85.5},{id:3,number:3,capacity:6,location:"Terrace",status:"available",waiter:null,currentOrder:null},{id:4,number:4,capacity:4,location:"Main Floor",status:"reserved",waiter:"Jane Smith",currentOrder:null},{id:5,number:5,capacity:8,location:"Private Room",status:"occupied",waiter:"Mike Johnson",currentOrder:124.75},{id:6,number:6,capacity:2,location:"Bar Area",status:"available",waiter:null,currentOrder:null},{id:7,number:7,capacity:4,location:"Main Floor",status:"out-of-service",waiter:null,currentOrder:null},{id:8,number:8,capacity:6,location:"Terrace",status:"available",waiter:null,currentOrder:null}],isLoading:!1}),getters:{allTables:a=>a.tables,availableTables:a=>a.tables.filter(e=>e.status==="available"),occupiedTables:a=>a.tables.filter(e=>e.status==="occupied"),reservedTables:a=>a.tables.filter(e=>e.status==="reserved"),outOfServiceTables:a=>a.tables.filter(e=>e.status==="out-of-service"),totalTables:a=>a.tables.length,tableStatusCounts:a=>({available:a.tables.filter(e=>e.status==="available").length,occupied:a.tables.filter(e=>e.status==="occupied").length,reserved:a.tables.filter(e=>e.status==="reserved").length,outOfService:a.tables.filter(e=>e.status==="out-of-service").length}),getTableById:a=>e=>a.tables.find(t=>t.id===e)},actions:{async addTable(a){this.isLoading=!0;try{const e={id:Math.max(...this.tables.map(t=>t.id))+1,...a,status:"available",waiter:null,currentOrder:null};return this.tables.push(e),{success:!0,table:e}}catch(e){return{success:!1,error:e.message}}finally{this.isLoading=!1}},async updateTableStatus(a,e){const t=this.tables.find(r=>r.id===a);return t?(t.status=e,e==="available"&&(t.waiter=null,t.currentOrder=null),{success:!0}):{success:!1,error:"Table not found"}},async assignWaiterToTable(a,e){const t=this.tables.find(r=>r.id===a);return t?(t.waiter=e,{success:!0}):{success:!1,error:"Table not found"}},async updateTableOrder(a,e){const t=this.tables.find(r=>r.id===a);return t?(t.currentOrder=e,{success:!0}):{success:!1,error:"Table not found"}}}});export{i as u};
