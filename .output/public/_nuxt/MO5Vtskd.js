import{g as r}from"./BkdkwG03.js";const o=r("waiters",{state:()=>({waiters:[{id:1,name:"John Doe",position:"Senior Waiter",phone:"+1 (555) 123-4567",email:"john.doe@restaurant.com",experience:5,status:"on-duty",tablesServed:8,rating:4.8,avatar:"https://images.pexels.com/photos/1043471/pexels-photo-1043471.jpeg?auto=compress&cs=tinysrgb&w=400"},{id:2,name:"Jane Smith",position:"Waiter",phone:"+1 (555) 234-5678",email:"jane.smith@restaurant.com",experience:3,status:"on-break",tablesServed:5,rating:4.6,avatar:"https://images.pexels.com/photos/1065084/pexels-photo-1065084.jpeg?auto=compress&cs=tinysrgb&w=400"},{id:3,name:"Mike Johnson",position:"Head Waiter",phone:"+1 (555) 345-6789",email:"mike.johnson@restaurant.com",experience:8,status:"on-duty",tablesServed:12,rating:4.9,avatar:"https://images.pexels.com/photos/1040880/pexels-photo-1040880.jpeg?auto=compress&cs=tinysrgb&w=400"},{id:4,name:"Sarah Wilson",position:"Waiter",phone:"+1 (555) 456-7890",email:"sarah.wilson@restaurant.com",experience:2,status:"on-duty",tablesServed:6,rating:4.4,avatar:"https://images.pexels.com/photos/1036622/pexels-photo-1036622.jpeg?auto=compress&cs=tinysrgb&w=400"},{id:5,name:"David Brown",position:"Sommelier",phone:"+1 (555) 567-8901",email:"david.brown@restaurant.com",experience:12,status:"off-duty",tablesServed:0,rating:4.7,avatar:"https://images.pexels.com/photos/1043474/pexels-photo-1043474.jpeg?auto=compress&cs=tinysrgb&w=400"},{id:6,name:"Lisa Garcia",position:"Waiter",phone:"+1 (555) 678-9012",email:"lisa.garcia@restaurant.com",experience:4,status:"on-duty",tablesServed:9,rating:4.5,avatar:"https://images.pexels.com/photos/1043473/pexels-photo-1043473.jpeg?auto=compress&cs=tinysrgb&w=400"}],isLoading:!1}),getters:{allWaiters:t=>t.waiters,onDutyWaiters:t=>t.waiters.filter(e=>e.status==="on-duty"),onBreakWaiters:t=>t.waiters.filter(e=>e.status==="on-break"),offDutyWaiters:t=>t.waiters.filter(e=>e.status==="off-duty"),totalWaiters:t=>t.waiters.length,topPerformingWaiters:t=>[...t.waiters].filter(e=>e.status==="on-duty").sort((e,s)=>s.tablesServed-e.tablesServed).slice(0,3),getWaiterById:t=>e=>t.waiters.find(s=>s.id===e),waiterStatusCounts:t=>({onDuty:t.waiters.filter(e=>e.status==="on-duty").length,onBreak:t.waiters.filter(e=>e.status==="on-break").length,offDuty:t.waiters.filter(e=>e.status==="off-duty").length})},actions:{async addWaiter(t){this.isLoading=!0;try{const e={id:Math.max(...this.waiters.map(s=>s.id))+1,...t,status:"off-duty",tablesServed:0,rating:4};return this.waiters.push(e),{success:!0,waiter:e}}catch(e){return{success:!1,error:e.message}}finally{this.isLoading=!1}},async updateWaiterStatus(t,e){const s=this.waiters.find(a=>a.id===t);return s?(s.status=e,e==="off-duty"&&(s.tablesServed=0),{success:!0,waiter:s}):{success:!1,error:"Waiter not found"}},async updateWaiter(t,e){this.isLoading=!0;try{const s=this.waiters.findIndex(a=>a.id===t);return s!==-1?(this.waiters[s]={...this.waiters[s],...e},{success:!0,waiter:this.waiters[s]}):{success:!1,error:"Waiter not found"}}catch(s){return{success:!1,error:s.message}}finally{this.isLoading=!1}},async deleteWaiter(t){this.isLoading=!0;try{const e=this.waiters.findIndex(s=>s.id===t);return e!==-1?(this.waiters.splice(e,1),{success:!0}):{success:!1,error:"Waiter not found"}}catch(e){return{success:!1,error:e.message}}finally{this.isLoading=!1}},incrementTablesServed(t){const e=this.waiters.find(s=>s.id===t);e&&e.tablesServed++}}});export{o as u};
